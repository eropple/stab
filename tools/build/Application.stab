/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using java.io;
using java.lang;
using java.util;
using stab.tools.helpers;

package stab.tools.build {

	public class Application {
		public static void main(String[] args) {
			System.out.println("Building...");
			System.exit(new Application().run(args));
		}
		
		public int run(String[] arguments) {
			int code;
			if ((code = buildAnnotatedLibrary()) != 0) {
				return code;
			}
			if ((code = buildCompiler()) != 0) {
				return code;
			}
			if ((code = buildRuntimeLibrary()) != 0) {
				return code;
			}
			if ((code = buildTests()) != 0) {
				return code;
			}
			return buildBuild();
		}
		
		private int buildAnnotatedLibrary() {
			System.out.println();
			System.out.println("Annotated Library");
			System.out.println("--------------------------");
			
			var args = new ArrayList<String>();
			args.add(@"-cp:bin\stabrt.jar");
			args.add(@"-out:annotated\stabal.jar");
			addSourceFiles(new File(@"annotated\sources"), args);
			
			return new stab.tools.compiler.Application().run(args.toArray(new String[args.size()]));
		}

		private int buildCompiler() {
			System.out.println();
			System.out.println("Compiler");
			System.out.println("--------------------------");

			var args = new ArrayList<String>();
			args.add(@"-al:bin\stabal.jar");
			args.add(@"-cp:bin\stabrt.jar;bin\asm-3.3.jar");
			args.add(@"-resources:compiler\resources");
			args.add(@"-manifest:compiler\MANIFEST.MF");
			args.add(@"-out:compiler\stabc.jar");
			addSourceFiles(new File(@"compiler\sources"), args);
			
			return new stab.tools.compiler.Application().run(args.toArray(new String[args.size()]));
		}

		private int buildRuntimeLibrary() {
			System.out.println();
			System.out.println("Runtime Library");
			System.out.println("--------------------------");
			
			var args = new ArrayList<String>();
			args.add(@"-al:bin\stabal.jar");
			args.add(@"-doc:runtime\doc.xml");
			args.add(@"-out:runtime\stabrt.jar");
			addSourceFiles(new File(@"runtime\sources"), args);
			
			return new stab.tools.compiler.Application().run(args.toArray(new String[args.size()]));
		}

		private int buildTests() {
			System.out.println();
			System.out.println("Tests");
			System.out.println("--------------------------");
			
			var args = new ArrayList<String>();
			args.add(@"-al:bin\stabal.jar");
			args.add(@"-cp:bin\stabrt.jar;bin\junit-4.8.1.jar;bin\asm-3.3.jar;compiler\stabc.jar");
			args.add(@"-out:tests\tests.jar");
			addSourceFiles(new File(@"tests\sources"), args);
			
			int code = new stab.tools.compiler.Application().run(args.toArray(new String[args.size()]));
			if (code == 0) {
				System.out.println();
				System.out.println("Tests Launcher");
				args = new ArrayList<String>();
				args.add(@"-al:bin\stabal.jar");
				args.add(@"-cp:bin\stabrt.jar;bin\junit-4.8.1.jar");
				args.add(@"-manifest:tools\tests\MANIFEST.MF");
				args.add(@"-out:bin\tests.jar");
				addSourceFiles(new File(@"tools\tests"), args);
				
				code = new stab.tools.compiler.Application().run(args.toArray(new String[args.size()]));
			}
			return code;
		}

		private int buildBuild() {
			System.out.println();
			System.out.println("Build Application");
			System.out.println("--------------------------");

			var args = new ArrayList<String>();
			args.add(@"-al:bin\stabal.jar");
			args.add(@"-cp:bin\stabrt.jar;bin\asm-3.3.jar;bin\stabc.jar");
			args.add(@"-manifest:tools\build\MANIFEST.MF");
			args.add(@"-out:bin\build.jar");
			addSourceFiles(new File(@"tools\build"), args);
			
			return new stab.tools.compiler.Application().run(args.toArray(new String[args.size()]));
		}

		private void addSourceFiles(File dir, List<String> args) {
			foreach (var file in dir.listFiles()) {
				if (file.isDirectory()) {
					addSourceFiles(file, args);
				} else if (PathHelper.getExtension(file.getName()).equals(".stab")) {
					args.add(file.getAbsolutePath());
				}
			}
		}
	}
}
