/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using java.lang;
using java.util;

package stab.tools.bytecode {

    abstract class ClassType : JvmTypeInfo {
        protected Iterable<JvmTypeInfo> genericArguments;
        protected JvmTypeInfo baseType;
        JvmTypeInfo declaringType;
        protected Iterable<JvmTypeInfo> interfaces;
        protected ArrayList<JvmFieldInfo> fields;
        protected ArrayList<JvmMethodInfo> methods;
        protected ArrayList<JvmTypeInfo> nestedTypes;
        private String signature;

        protected ClassType(String name)
            : super(TypeKind.Reference, name) {
            this.fields = new ArrayList<JvmFieldInfo>();
            this.methods = new ArrayList<JvmMethodInfo>();
            this.nestedTypes = new ArrayList<JvmTypeInfo>();
        }
        
        public override JvmTypeInfo DeclaringType {
            get {
                return declaringType;
            }
        }
        
        public override Iterable<JvmTypeInfo> GenericArguments {
            get {
                if (genericArguments == null) {
                    initializeBaseTypes();
                }
                return genericArguments;
            }
        }
        
        public override JvmTypeInfo BaseType {
            get {
                initializeBaseTypes();
                return baseType;
            }
        }
        
        public override Iterable<JvmTypeInfo> Interfaces {
            get {
                initializeBaseTypes();
                return interfaces;
            }
        }
        
        public override Iterable<JvmFieldInfo> Fields {
            get {
                initializeFields();
                return fields;
            }
        }
        
        public override Iterable<JvmMethodInfo> Methods {
            get {
                initializeMethods();
                return methods;
            }
        }
        
        public override Iterable<JvmTypeInfo> NestedTypes {
            get {
                initializeNestedTypes();
                return nestedTypes;
            }
        }

        public override String Signature {
            get {
                if (signature == null) {
                    signature = BytecodeHelper.getClassTypeSignature(this, this.GenericArguments);
                }
                return signature;
            }
        }
        
        protected abstract void initializeBaseTypes();
        protected abstract void initializeFields();
        protected abstract void initializeMethods();
        protected abstract void initializeNestedTypes();
    }
}
