/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using java.lang;
using org.objectweb.asm;

package stab.tools.bytecode {
    
    public abstract class JvmInstruction {
        final static JvmInstruction Aaload = new SimpleInstruction(JvmOpcode.Aaload);
        final static JvmInstruction Aastore = new SimpleInstruction(JvmOpcode.Aastore);
        final static JvmInstruction Aconst_Null = new SimpleInstruction(JvmOpcode.Aconst_Null);
        final static JvmInstruction Areturn = new SimpleInstruction(JvmOpcode.Areturn);
        final static JvmInstruction Arraylength = new SimpleInstruction(JvmOpcode.Arraylength);
        final static JvmInstruction Athrow = new SimpleInstruction(JvmOpcode.Athrow);
        final static JvmInstruction Baload = new SimpleInstruction(JvmOpcode.Baload);
        final static JvmInstruction Bastore = new SimpleInstruction(JvmOpcode.Bastore);
        final static JvmInstruction Caload = new SimpleInstruction(JvmOpcode.Caload);
        final static JvmInstruction Castore = new SimpleInstruction(JvmOpcode.Castore);
        final static JvmInstruction D2f = new SimpleInstruction(JvmOpcode.D2f);
        final static JvmInstruction D2i = new SimpleInstruction(JvmOpcode.D2i);
        final static JvmInstruction D2l = new SimpleInstruction(JvmOpcode.D2l);
        final static JvmInstruction Dadd = new SimpleInstruction(JvmOpcode.Dadd);
        final static JvmInstruction Daload = new SimpleInstruction(JvmOpcode.Daload);
        final static JvmInstruction Dastore = new SimpleInstruction(JvmOpcode.Dastore);
        final static JvmInstruction Dcmpg = new SimpleInstruction(JvmOpcode.Dcmpg);
        final static JvmInstruction Dcmpl = new SimpleInstruction(JvmOpcode.Dcmpl);
        final static JvmInstruction Dconst_0 = new SimpleInstruction(JvmOpcode.Dconst_0);
        final static JvmInstruction Dconst_1 = new SimpleInstruction(JvmOpcode.Dconst_1);
        final static JvmInstruction Ddiv = new SimpleInstruction(JvmOpcode.Ddiv);
        final static JvmInstruction Dmul = new SimpleInstruction(JvmOpcode.Dmul);
        final static JvmInstruction Dneg = new SimpleInstruction(JvmOpcode.Dneg);
        final static JvmInstruction Drem = new SimpleInstruction(JvmOpcode.Drem);
        final static JvmInstruction Dreturn = new SimpleInstruction(JvmOpcode.Dreturn);
        final static JvmInstruction Dsub = new SimpleInstruction(JvmOpcode.Dsub);
        final static JvmInstruction Dup = new SimpleInstruction(JvmOpcode.Dup);
        final static JvmInstruction Dup_X1 = new SimpleInstruction(JvmOpcode.Dup_X1);
        final static JvmInstruction Dup_X2 = new SimpleInstruction(JvmOpcode.Dup_X2);
        final static JvmInstruction Dup2 = new SimpleInstruction(JvmOpcode.Dup2);
        final static JvmInstruction Dup2_X1 = new SimpleInstruction(JvmOpcode.Dup2_X1);
        final static JvmInstruction Dup2_X2 = new SimpleInstruction(JvmOpcode.Dup2_X2);
        final static JvmInstruction F2d = new SimpleInstruction(JvmOpcode.F2d);
        final static JvmInstruction F2i = new SimpleInstruction(JvmOpcode.F2i);
        final static JvmInstruction F2l = new SimpleInstruction(JvmOpcode.F2l);
        final static JvmInstruction Fadd = new SimpleInstruction(JvmOpcode.Fadd);
        final static JvmInstruction Faload = new SimpleInstruction(JvmOpcode.Faload);
        final static JvmInstruction Fastore = new SimpleInstruction(JvmOpcode.Fastore);
        final static JvmInstruction Fcmpg = new SimpleInstruction(JvmOpcode.Fcmpg);
        final static JvmInstruction Fcmpl = new SimpleInstruction(JvmOpcode.Fcmpl);
        final static JvmInstruction Fconst_0 = new SimpleInstruction(JvmOpcode.Fconst_0);
        final static JvmInstruction Fconst_1 = new SimpleInstruction(JvmOpcode.Fconst_1);
        final static JvmInstruction Fconst_2 = new SimpleInstruction(JvmOpcode.Fconst_2);
        final static JvmInstruction Fdiv = new SimpleInstruction(JvmOpcode.Fdiv);
        final static JvmInstruction Fmul = new SimpleInstruction(JvmOpcode.Fmul);
        final static JvmInstruction Fneg = new SimpleInstruction(JvmOpcode.Fneg);
        final static JvmInstruction Frem = new SimpleInstruction(JvmOpcode.Frem);
        final static JvmInstruction Freturn = new SimpleInstruction(JvmOpcode.Freturn);
        final static JvmInstruction Fsub = new SimpleInstruction(JvmOpcode.Fsub);
        final static JvmInstruction I2b = new SimpleInstruction(JvmOpcode.I2b);
        final static JvmInstruction I2c = new SimpleInstruction(JvmOpcode.I2c);
        final static JvmInstruction I2d = new SimpleInstruction(JvmOpcode.I2d);
        final static JvmInstruction I2f = new SimpleInstruction(JvmOpcode.I2f);
        final static JvmInstruction I2l = new SimpleInstruction(JvmOpcode.I2l);
        final static JvmInstruction I2s = new SimpleInstruction(JvmOpcode.I2s);
        final static JvmInstruction Iadd = new SimpleInstruction(JvmOpcode.Iadd);
        final static JvmInstruction Iaload = new SimpleInstruction(JvmOpcode.Iaload);
        final static JvmInstruction Iand = new SimpleInstruction(JvmOpcode.Iand);
        final static JvmInstruction Iastore = new SimpleInstruction(JvmOpcode.Iastore);
        final static JvmInstruction Iconst_0 = new SimpleInstruction(JvmOpcode.Iconst_0);
        final static JvmInstruction Iconst_1 = new SimpleInstruction(JvmOpcode.Iconst_1);
        final static JvmInstruction Iconst_2 = new SimpleInstruction(JvmOpcode.Iconst_2);
        final static JvmInstruction Iconst_3 = new SimpleInstruction(JvmOpcode.Iconst_3);
        final static JvmInstruction Iconst_4 = new SimpleInstruction(JvmOpcode.Iconst_4);
        final static JvmInstruction Iconst_5 = new SimpleInstruction(JvmOpcode.Iconst_5);
        final static JvmInstruction Iconst_M1 = new SimpleInstruction(JvmOpcode.Iconst_M1);
        final static JvmInstruction Idiv = new SimpleInstruction(JvmOpcode.Idiv);
        final static JvmInstruction Imul = new SimpleInstruction(JvmOpcode.Imul);
        final static JvmInstruction Ineg = new SimpleInstruction(JvmOpcode.Ineg);
        final static JvmInstruction Ior = new SimpleInstruction(JvmOpcode.Ior);
        final static JvmInstruction Irem = new SimpleInstruction(JvmOpcode.Irem);
        final static JvmInstruction Ireturn = new SimpleInstruction(JvmOpcode.Ireturn);
        final static JvmInstruction Ishl = new SimpleInstruction(JvmOpcode.Ishl);
        final static JvmInstruction Ishr = new SimpleInstruction(JvmOpcode.Ishr);
        final static JvmInstruction Isub = new SimpleInstruction(JvmOpcode.Isub);
        final static JvmInstruction Iushr = new SimpleInstruction(JvmOpcode.Iushr);
        final static JvmInstruction Ixor = new SimpleInstruction(JvmOpcode.Ixor);
        final static JvmInstruction L2d = new SimpleInstruction(JvmOpcode.L2d);
        final static JvmInstruction L2f = new SimpleInstruction(JvmOpcode.L2f);
        final static JvmInstruction L2i = new SimpleInstruction(JvmOpcode.L2i);
        final static JvmInstruction Ladd = new SimpleInstruction(JvmOpcode.Ladd);
        final static JvmInstruction Laload = new SimpleInstruction(JvmOpcode.Laload);
        final static JvmInstruction Land = new SimpleInstruction(JvmOpcode.Land);
        final static JvmInstruction Lastore = new SimpleInstruction(JvmOpcode.Lastore);
        final static JvmInstruction Lcmp = new SimpleInstruction(JvmOpcode.Lcmp);
        final static JvmInstruction Lconst_0 = new SimpleInstruction(JvmOpcode.Lconst_0);
        final static JvmInstruction Lconst_1 = new SimpleInstruction(JvmOpcode.Lconst_1);
        final static JvmInstruction Ldiv = new SimpleInstruction(JvmOpcode.Ldiv);
        final static JvmInstruction Lmul = new SimpleInstruction(JvmOpcode.Lmul);
        final static JvmInstruction Lneg = new SimpleInstruction(JvmOpcode.Lneg);
        final static JvmInstruction Lor = new SimpleInstruction(JvmOpcode.Lor);
        final static JvmInstruction Lrem = new SimpleInstruction(JvmOpcode.Lrem);
        final static JvmInstruction Lreturn = new SimpleInstruction(JvmOpcode.Lreturn);
        final static JvmInstruction Lshl = new SimpleInstruction(JvmOpcode.Lshl);
        final static JvmInstruction Lshr = new SimpleInstruction(JvmOpcode.Lshr);
        final static JvmInstruction Lsub = new SimpleInstruction(JvmOpcode.Lsub);
        final static JvmInstruction Lushr = new SimpleInstruction(JvmOpcode.Lushr);
        final static JvmInstruction Lxor = new SimpleInstruction(JvmOpcode.Lxor);
        final static JvmInstruction Monitorenter = new SimpleInstruction(JvmOpcode.Monitorenter);
        final static JvmInstruction Monitorexit = new SimpleInstruction(JvmOpcode.Monitorexit);
        final static JvmInstruction Nop = new SimpleInstruction(JvmOpcode.Nop);
        final static JvmInstruction Pop = new SimpleInstruction(JvmOpcode.Pop);
        final static JvmInstruction Pop2 = new SimpleInstruction(JvmOpcode.Pop2);
        final static JvmInstruction Return = new SimpleInstruction(JvmOpcode.Return);
        final static JvmInstruction Saload = new SimpleInstruction(JvmOpcode.Saload);
        final static JvmInstruction Sastore = new SimpleInstruction(JvmOpcode.Sastore);
        final static JvmInstruction Swap = new SimpleInstruction(JvmOpcode.Swap);

        final static JvmInstruction Aload_0 = new LocalVariableInstruction(JvmOpcode.Aload, 0);
        final static JvmInstruction Aload_1 = new LocalVariableInstruction(JvmOpcode.Aload, 1);
        final static JvmInstruction Aload_2 = new LocalVariableInstruction(JvmOpcode.Aload, 2);
        final static JvmInstruction Aload_3 = new LocalVariableInstruction(JvmOpcode.Aload, 3);
        final static JvmInstruction Fload_0 = new LocalVariableInstruction(JvmOpcode.Fload, 0);
        final static JvmInstruction Fload_1 = new LocalVariableInstruction(JvmOpcode.Fload, 1);
        final static JvmInstruction Fload_2 = new LocalVariableInstruction(JvmOpcode.Fload, 2);
        final static JvmInstruction Fload_3 = new LocalVariableInstruction(JvmOpcode.Fload, 3);
        final static JvmInstruction Dload_0 = new LocalVariableInstruction(JvmOpcode.Dload, 0);
        final static JvmInstruction Dload_1 = new LocalVariableInstruction(JvmOpcode.Dload, 1);
        final static JvmInstruction Dload_2 = new LocalVariableInstruction(JvmOpcode.Dload, 2);
        final static JvmInstruction Dload_3 = new LocalVariableInstruction(JvmOpcode.Dload, 3);
        final static JvmInstruction Iload_0 = new LocalVariableInstruction(JvmOpcode.Iload, 0);
        final static JvmInstruction Iload_1 = new LocalVariableInstruction(JvmOpcode.Iload, 1);
        final static JvmInstruction Iload_2 = new LocalVariableInstruction(JvmOpcode.Iload, 2);
        final static JvmInstruction Iload_3 = new LocalVariableInstruction(JvmOpcode.Iload, 3);
        final static JvmInstruction Lload_0 = new LocalVariableInstruction(JvmOpcode.Lload, 0);
        final static JvmInstruction Lload_1 = new LocalVariableInstruction(JvmOpcode.Lload, 1);
        final static JvmInstruction Lload_2 = new LocalVariableInstruction(JvmOpcode.Lload, 2);
        final static JvmInstruction Lload_3 = new LocalVariableInstruction(JvmOpcode.Lload, 3);

        final static JvmInstruction Astore_0 = new LocalVariableInstruction(JvmOpcode.Astore, 0);
        final static JvmInstruction Astore_1 = new LocalVariableInstruction(JvmOpcode.Astore, 1);
        final static JvmInstruction Astore_2 = new LocalVariableInstruction(JvmOpcode.Astore, 2);
        final static JvmInstruction Astore_3 = new LocalVariableInstruction(JvmOpcode.Astore, 3);
        final static JvmInstruction Fstore_0 = new LocalVariableInstruction(JvmOpcode.Fstore, 0);
        final static JvmInstruction Fstore_1 = new LocalVariableInstruction(JvmOpcode.Fstore, 1);
        final static JvmInstruction Fstore_2 = new LocalVariableInstruction(JvmOpcode.Fstore, 2);
        final static JvmInstruction Fstore_3 = new LocalVariableInstruction(JvmOpcode.Fstore, 3);
        final static JvmInstruction Dstore_0 = new LocalVariableInstruction(JvmOpcode.Dstore, 0);
        final static JvmInstruction Dstore_1 = new LocalVariableInstruction(JvmOpcode.Dstore, 1);
        final static JvmInstruction Dstore_2 = new LocalVariableInstruction(JvmOpcode.Dstore, 2);
        final static JvmInstruction Dstore_3 = new LocalVariableInstruction(JvmOpcode.Dstore, 3);
        final static JvmInstruction Istore_0 = new LocalVariableInstruction(JvmOpcode.Istore, 0);
        final static JvmInstruction Istore_1 = new LocalVariableInstruction(JvmOpcode.Istore, 1);
        final static JvmInstruction Istore_2 = new LocalVariableInstruction(JvmOpcode.Istore, 2);
        final static JvmInstruction Istore_3 = new LocalVariableInstruction(JvmOpcode.Istore, 3);
        final static JvmInstruction Lstore_0 = new LocalVariableInstruction(JvmOpcode.Lstore, 0);
        final static JvmInstruction Lstore_1 = new LocalVariableInstruction(JvmOpcode.Lstore, 1);
        final static JvmInstruction Lstore_2 = new LocalVariableInstruction(JvmOpcode.Lstore, 2);
        final static JvmInstruction Lstore_3 = new LocalVariableInstruction(JvmOpcode.Lstore, 3);

        final static JvmInstruction Newarray_4 = new IntOperandInstruction(JvmOpcode.Newarray, 4);
        final static JvmInstruction Newarray_5 = new IntOperandInstruction(JvmOpcode.Newarray, 5);
        final static JvmInstruction Newarray_6 = new IntOperandInstruction(JvmOpcode.Newarray, 6);
        final static JvmInstruction Newarray_7 = new IntOperandInstruction(JvmOpcode.Newarray, 7);
        final static JvmInstruction Newarray_8 = new IntOperandInstruction(JvmOpcode.Newarray, 8);
        final static JvmInstruction Newarray_9 = new IntOperandInstruction(JvmOpcode.Newarray, 9);
        final static JvmInstruction Newarray_10 = new IntOperandInstruction(JvmOpcode.Newarray, 10);
        final static JvmInstruction Newarray_11 = new IntOperandInstruction(JvmOpcode.Newarray, 11);

        protected JvmInstruction(JvmOpcode opcode) {
            this.Opcode = opcode;
        }
        
        public JvmOpcode Opcode {
            get;
            private set;
        }

        public virtual int LocalVariable {
            get {
                throw new UnsupportedOperationException();
            }
        }
        
        public virtual int IntOperand {
            get {
                throw new UnsupportedOperationException();
            }
        }
        
        public virtual int Increment {
            get {
                throw new UnsupportedOperationException();
            }
        }
        
        public virtual JvmLabelMarker LabelMarker {
            get {
                throw new UnsupportedOperationException();
            }
        }
        
        public virtual Object ConstantValue {
            get {
                throw new UnsupportedOperationException();
            }
        }
        
        public virtual JvmFieldInfo Field {
            get {
                throw new UnsupportedOperationException();
            }
        }
        
        public virtual JvmMethodInfo Method {
            get {
                throw new UnsupportedOperationException();
            }
        }
        
        public virtual JvmTypeInfo Type {
            get {
                throw new UnsupportedOperationException();
            }
        }
        
        public virtual int MinimumKey {
            get {
                throw new UnsupportedOperationException();
            }
        }
        
        public virtual int MaximumKey {
            get {
                throw new UnsupportedOperationException();
            }
        }

        public virtual JvmLabelMarker[] Labels {
            get {
                throw new UnsupportedOperationException();
            }
        }

        public virtual JvmLabelMarker DefaultLabel {
            get {
                throw new UnsupportedOperationException();
            }
        }

        public virtual int[] Keys {
            get {
                throw new UnsupportedOperationException();
            }
        }

        public virtual int Dimensions {
            get {
                throw new UnsupportedOperationException();
            }
        }
        
        virtual Label Label {
            get {
                throw new UnsupportedOperationException();
            }
        }
        
        abstract void accept(MethodVisitor visitor);
    }
    
    public class JvmLabelMarker : JvmInstruction {
        private Label label;
        
        JvmLabelMarker(Label label)
            : super(JvmOpcode.LabelMarker) {
            this.label = label;
        }
        
        override Label Label {
            get {
                return label;
            }
        }
        
        override void accept(MethodVisitor visitor) {
            visitor.visitLabel(label);
        }
    }
    
    class SimpleInstruction : JvmInstruction {
        SimpleInstruction(JvmOpcode opcode)
            : super(opcode) {
        }
        
        override void accept(MethodVisitor visitor) {
            visitor.visitInsn(this.Opcode.Value);
        }
    }

    class LocalVariableInstruction : JvmInstruction {
        private int localVariable;
    
        LocalVariableInstruction(JvmOpcode opcode, int localVariable)
            : super(opcode) {
            this.localVariable = localVariable;
        }
        
        public override int LocalVariable {
            get {
                return localVariable;
            }
        }
        
        override void accept(MethodVisitor visitor) {
            visitor.visitVarInsn(this.Opcode.Value, localVariable);
        }
    }
    
    class IntOperandInstruction : JvmInstruction {
        private int intOperand;
        
        IntOperandInstruction(JvmOpcode opcode, int intOperand)
            : super(opcode) {
            this.intOperand = intOperand;
        }
        
        public override int IntOperand {
            get {
                return intOperand;
            }
        }
        
        override void accept(MethodVisitor visitor) {
            visitor.visitIntInsn(this.Opcode.Value, intOperand);
        }
    }
    
    class IncrementInstruction : JvmInstruction {
        private int localVariable;
        private int increment;
        
        IncrementInstruction(int localVariable, int increment)
            : super(JvmOpcode.Iinc) {
            this.localVariable = localVariable;
            this.increment = increment;
        }
        
        public override int LocalVariable {
            get {
                return localVariable;
            }
        }
        
        public override int Increment {
            get {
                return increment;
            }
        }
        
        override void accept(MethodVisitor visitor) {
            visitor.visitIincInsn(localVariable, increment);
        }
    }

    class JumpInstruction : JvmInstruction {
        private JvmLabelMarker labelMarker;
        
        JumpInstruction(JvmOpcode opcode, JvmLabelMarker labelMarker)
            : super(opcode) {
            this.labelMarker = labelMarker;
        }
        
        public override JvmLabelMarker LabelMarker {
            get {
                return labelMarker;
            }
        }
        
        override void accept(MethodVisitor visitor) {
            visitor.visitJumpInsn(this.Opcode.Value, labelMarker.Label);
        }
    }
    
    class LoadConstantInstruction : JvmInstruction {
        private Object constantValue;
        
        LoadConstantInstruction(Object constantValue)
            : super(JvmOpcode.Ldc) {
            this.constantValue = constantValue;
        }
        
        override void accept(MethodVisitor visitor) {
            visitor.visitLdcInsn(constantValue);
        }
    }
    
    class FieldInstruction : JvmInstruction {
        private JvmFieldInfo field;
        
        FieldInstruction(JvmOpcode opcode, JvmFieldInfo field)
            : super(opcode) {
            this.field = field;
        }
        
        public override JvmFieldInfo Field {
            get {
                return field;
            }
        }
        
        override void accept(MethodVisitor visitor) {
            visitor.visitFieldInsn(this.Opcode.Value, field.DeclaringType.FullName, field.Name, field.Descriptor);
        }
    }
    
    class MethodInstruction : JvmInstruction {
        private JvmMethodInfo method;
        
        MethodInstruction(JvmOpcode opcode, JvmMethodInfo method)
            : super(opcode) {
            this.method = method;
        }
        
        public override JvmMethodInfo Method {
            get {
                return method;
            }
        }
        
        override void accept(MethodVisitor visitor) {
            visitor.visitMethodInsn(this.Opcode.Value, method.DeclaringType.FullName, method.Name, method.Descriptor);
        }
    }
    
    class TypeInstruction : JvmInstruction {
        private JvmTypeInfo type;
        
        TypeInstruction(JvmOpcode opcode, JvmTypeInfo type)
            : super(opcode) {
            this.type = type;
        }
        
        public override JvmTypeInfo Type {
            get {
                return type;
            }
        }
        
        override void accept(MethodVisitor visitor) {
            if (type.IsGenericParameter) {
                var desc = type.Descriptor;
                visitor.visitTypeInsn(this.Opcode.Value, desc.substring(1, desc.Length - 1));
            } else {
                visitor.visitTypeInsn(this.Opcode.Value, type.FullName);
            }
        }
    }
    
    class LookupSwitchInstruction : JvmInstruction {
        private int[] keys;
        private JvmLabelMarker defaultLabel;
        private JvmLabelMarker[] labels;
    
        LookupSwitchInstruction(int[] keys, JvmLabelMarker[] labels, JvmLabelMarker defaultLabel)
            : super(JvmOpcode.Lookupswitch) {
            this.keys = keys;
            this.labels = labels;
            this.defaultLabel = defaultLabel;
        }
        
        public override int[] Keys {
            get {
                return keys;
            }
        }
        
        public override JvmLabelMarker[] Labels {
            get {
                return labels;
            }
        }
        
        public override JvmLabelMarker DefaultLabel {
            get {
                return defaultLabel;
            }
        }
        
        override void accept(MethodVisitor visitor) {
            var t = new Label[sizeof(labels)];
            for (int i = 0; i < sizeof(t); i++) {
                t[i] = labels[i].Label;
            }
            visitor.visitLookupSwitchInsn(defaultLabel.Label, keys, t);
        }
    }
    
    class TableSwitchInstruction : JvmInstruction {
        private int minimumKey;
        private int maximumKey;
        private JvmLabelMarker[] labels;
        private JvmLabelMarker defaultLabel;
        
        TableSwitchInstruction(int minimumKey, int maximumKey, JvmLabelMarker[] labels, JvmLabelMarker defaultLabel)
            : super(JvmOpcode.Tableswitch) {
            this.minimumKey = minimumKey;
            this.maximumKey = maximumKey;
            this.labels = labels;
            this.defaultLabel = defaultLabel;
        }
        
        public override int MinimumKey {
            get {
                return minimumKey;
            }
        }
        
        public override int MaximumKey {
            get {
                return maximumKey;
            }
        }
        
        public override JvmLabelMarker[] Labels {
            get {
                return labels;
            }
        }
        
        public override JvmLabelMarker DefaultLabel {
            get {
                return defaultLabel;
            }
        }
        
        override void accept(MethodVisitor visitor) {
            var t = new Label[sizeof(labels)];
            for (int i = 0; i < sizeof(t); i++) {
                t[i] = labels[i].Label;
            }
            visitor.visitTableSwitchInsn(minimumKey, maximumKey, defaultLabel.Label, t);
        }
    }
    
    class MultiNewArrayInstruction : JvmInstruction {
        private JvmTypeInfo type;
        private int dimensions;
        
        MultiNewArrayInstruction(JvmTypeInfo type, int dimensions)
            : super(JvmOpcode.Multianewarray) {
            this.type = type;
            this.dimensions = dimensions;
        }
        
        override void accept(MethodVisitor visitor) {
            visitor.visitMultiANewArrayInsn(type.FullName, dimensions);
        }
    }
}
