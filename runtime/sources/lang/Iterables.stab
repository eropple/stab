/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using java.lang;
using java.util;

package stab.lang {

    /// <summary>
    ///   Gives access to an iterator over a collection of boolean values.
    /// </summary>
	public interface BooleanIterable : Iterable<Boolean> {
        /// <summary>
        ///   Creates an iterator over a collection of boolean values.
        /// </summary>
		BooleanIterator iterator();
	}
	
    /// <summary>
    ///   Gives access to the elements of a collection of boolean values.
    /// </summary>
	public interface BooleanIterator : Iterator<Boolean> {
        /// <summary>
        ///   Advances to the next boolean in the collection and returns it.
        /// </summary>
		boolean nextBoolean();
	}

	public interface ByteIterable : Iterable<Byte> {
		ByteIterator iterator();
	}
	
	public interface ByteIterator : Iterator<Byte> {
		byte nextByte();
	}

	public interface CharIterable : Iterable<Character> {
		CharIterator iterator();
	}
	
	public interface CharIterator : Iterator<Character> {
		char nextChar();
	}

	public interface ShortIterable : Iterable<Short> {
		ShortIterator iterator();
	}
	
	public interface ShortIterator : Iterator<Short> {
		short nextShort();
	}

	public interface IntIterable : Iterable<Integer> {
		IntIterator iterator();
	}
	
	public interface IntIterator : Iterator<Integer> {
		int nextInt();
	}

	public interface LongIterable : Iterable<Long> {
		LongIterator iterator();
	}
	
	public interface LongIterator : Iterator<Long> {
		long nextLong();
	}

	public interface FloatIterable : Iterable<Float> {
		FloatIterator iterator();
	}
	
	public interface FloatIterator : Iterator<Float> {
		float nextFloat();
	}

	public interface DoubleIterable : Iterable<Double> {
		DoubleIterator iterator();
	}
	
	public interface DoubleIterator : Iterator<Double> {
		double nextDouble();
	}
}
