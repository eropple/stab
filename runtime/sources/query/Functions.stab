/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
package stab.query {

	public interface FunctionTBoolean<TArgument>  { boolean invoke(TArgument argument); }
	public interface FunctionIntBoolean           { boolean invoke(int argument); }
	public interface FunctionLongBoolean          { boolean invoke(long argument); }
	public interface FunctionFloatBoolean         { boolean invoke(float argument); }
	public interface FunctionDoubleBoolean        { boolean invoke(double argument); }

	public interface FunctionTInt<TArgument>      { int invoke(TArgument argument); }
	public interface FunctionBooleanInt           { int invoke(boolean argument); }
	public interface FunctionByteInt              { int invoke(byte argument); }
	public interface FunctionIntByte              { byte invoke(int argument); }
	public interface FunctionCharInt              { int invoke(char argument); }
	public interface FunctionIntChar              { char invoke(int argument); }
	public interface FunctionShortInt             { int invoke(short argument); }
	public interface FunctionIntShort             { short invoke(int argument); }
	public interface FunctionIntInt               { int invoke(int argument); }
	public interface FunctionIntT<TResult>        { TResult invoke(int argument); }
	
	public interface FunctionTLong<TArgument>     { long invoke(TArgument argument); }
	public interface FunctionIntLong              { long invoke(int argument); }
	public interface FunctionLongInt              { int invoke(long argument); }
	public interface FunctionLongLong             { long invoke(long argument); }
	public interface FunctionLongT<TResult>       { TResult invoke(long argument); }

	public interface FunctionTFloat<TArgument>    { float invoke(TArgument argument); }
	public interface FunctionIntFloat             { float invoke(int argument); }
	public interface FunctionLongFloat            { float invoke(long argument); }
	public interface FunctionFloatFloat           { float invoke(float argument); }
	public interface FunctionFloatT<TResult>      { TResult invoke(float argument); }

	public interface FunctionTDouble<TArgument>   { double invoke(TArgument argument); }
	public interface FunctionIntDouble            { double invoke(int argument); }
	public interface FunctionLongDouble           { double invoke(long argument); }
	public interface FunctionFloatDouble          { double invoke(float argument); }
	public interface FunctionDoubleDouble         { double invoke(double argument); }
	public interface FunctionDoubleT<TResult>     { TResult invoke(double argument); }

	public interface FunctionTT<TArgument, TResult> { TResult invoke(TArgument argument); }

	public interface FunctionIntIntInt            { int invoke(int argument1, int argument2); }
	public interface FunctionLongLongLong         { long invoke(long argument1, long argument2); }
	public interface FunctionFloatFloatFloat      { float invoke(float argument1, float argument2); }
	public interface FunctionDoubleDoubleDouble   { double invoke(double argument1, double argument2); }

	public interface FunctionTTT<TArgument1, TArgument2, TResult> { TResult invoke(TArgument1 argument1, TArgument2 argument2); }

}
