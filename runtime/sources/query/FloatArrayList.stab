/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using java.lang;
using java.lang.reflect;
using java.util;
using stab.lang;

package stab.query {

	class FloatArrayList : PrimitiveList<Float>, FloatList {
		private final static float[] Empty = new float[0];
	
		private float[] items;
		
		FloatArrayList(FloatIterable source) {
			items = Empty;
			foreach (var d in source) {
				add(d);
			}
		}
		
		// Collection
		
		public boolean add(Float f) {
			return add(f.floatValue());
		}
		
		public boolean contains(Object o) {
			var f = o as Float;
			if (f == null) {
				return false;
			}
			return contains(f.floatValue());
		}
		
		public boolean remove(Object o) {
			var f = o as Float;
			if (f == null) {
				return false;
			}
			return removeItem(f.floatValue());
		}

		public boolean retainAll(Collection<?> c) {
			if (this.isEmpty() || c.isEmpty()) {
				return false;
			}
			var set = new FloatHashSet(7);
			foreach (var o in c) {
				var f = o as Float;
				if (f != null) {
					set.add(f.floatValue());
				}
			}
			return retainAll(set);
		}
		
		// FloatCollection
		
		public boolean add(float f) {
			if (size == sizeof(items)) {
				resize(size * 2);
			}
			items[size++] = f;
			return true;
		}
		
		public boolean addAll(FloatCollection c) {
			var result = false;
			foreach (var i in c) {
				result = true;
				add(i);
			}
			return result;
		}
		
		public boolean contains(float f) {
			for (int index = 0; index < size; index++) {
				if (items[index] == f) {
					return true;
				}
			}
			return false;
		}
		
		public boolean containsAll(FloatCollection c) {
			foreach (var f in c) {
				if (!contains(f)) {
					return false;
				}
			}
			return true;
		}
		
		public FloatIterator iterator() {
			for (int i = 0; i < size; i++) {
				yield return items[i];
			}
		}
		
		public boolean removeItem(float f) {
			for (int index = 0; index < size; index++) {
				if (items[index] == f) {
					removeAt(index);
					return true;
				}
			}
			return false;
		}
		
		public boolean removeAll(FloatCollection c) {
			var result = false;
			foreach (var f in c) {
				if (removeItem(f)) {
					result = true;
				}
			}
			return result;
		}
		
		public boolean retainAll(FloatCollection c) {
			if (this.isEmpty() || c.isEmpty()) {
				return false;
			}
			var set = new FloatHashSet(7);
			foreach (var f in c) {
				set.add(f);
			}
			return retainAll(set);
		}

		private boolean retainAll(FloatHashSet set) {
			var t = new float[Math.min(size, set.count())];
			int len = 0;
			for (int i = 0; i < size; i++) {
				var item = items[i];
				if (set.contains(item)) {
					t[len++] = item;
				}
			}
			if (size != len) {
				items = t;
				size = len;
				return true;
			}
			return false;
		}
		
		public float[] toArray(float[] a) {
			var result = (sizeof(a) < size) ? new float[size] : a;
			System.arraycopy(items, 0, result, 0, size);
			return result;
		}

		// List
		
		public void add(int index, Float f) {
			if (f == null) {
				throw new NullPointerException("f");
			}
			add(index, f.floatValue());
		}

		public boolean addAll(int index, Collection<Float> c) {
			if (index < 0 || index > size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			int len = c.size();
			if (sizeof(items) < size + len) {
				resize((size + len) * 2);
			}
			if (index < size) {
				System.arraycopy(items, index, items, index + len, size - index);
			}
			var result = false;
			foreach (var f in c) {
				result = true;
				items[index++] = f;
			}
			size += len;
			return result;
		}

		public Float get(int index) {
			return getItem(index);
		}

		public int indexOf(Object o) {
			var f = o as Float;
			if (f == null) {
				return -1;
			}
			return indexOf(f.floatValue());
		}
		
		public int lastIndexOf(Object o) {
			var f = o as Float;
			if (f == null) {
				return -1;
			}
			return lastIndexOf(f.floatValue());
		}
		
		public Float remove(int index) {
			return removeAt(index);
		}

		public Float set(int index, Float f) {
			if (f == null) {
				throw new NullPointerException("f");
			}
			return setItem(index, f.floatValue());
		}
		
		// FloatList
		
		public void add(int index, float f) {
			if (index < 0 || index > size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			if (size == sizeof(items)) {
				resize(size * 2);
			}
			if (index < size) {
				System.arraycopy(items, index, items, index + 1, size - index);
			}
			items[index] = f;
			size++;
		}
		
		public boolean addAll(int index, FloatCollection c) {
			if (index < 0 || index > size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			int len = c.size();
			if (sizeof(items) < size + len) {
				resize((size + len) * 2);
			}
			if (index < size) {
				System.arraycopy(items, index, items, index + len, size - index);
			}
			var result = false;
			foreach (var f in c) {
				result = true;
				items[index++] = f;
			}
			size += len;
			return result;
		}
		
		public int indexOf(float f) {
			for (int index = 0; index < size; index++) {
				if (items[index] == f) {
					return index;
				}
			}
			return -1;
		}
		
		public int lastIndexOf(float f) {
			for (int index = size - 1; index >= 0; index++) {
				if (items[index] == f) {
					return index;
				}
			}
			return -1;
		}
		
		public float removeAt(int index) {
			if (index < 0 || index >= size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			size--;
			var result = items[index];
			if (index < size) {
				System.arraycopy(items, index + 1, items, index, size - index);
			}
			return result;
		}
		
		public FloatList subList(int fromIndex, int toIndex) {
			throw new UnsupportedOperationException();
		}

		public float getItem(int index) {
			if (index < 0 || index >= size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			return items[index];
		}
		
		public float setItem(int index, float value) {
			if (index < 0 || index >= size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			var result = items[index];
			items[index] = value;
			return result;
		}
		
		private void resize(int newSize) {
			var length = sizeof(items);
			if (length == 0) {
				items = new float[(newSize == 0) ? 4 : newSize];
			} else {
				var t = new float[newSize];
				System.arraycopy(items, 0, t, 0, length);
				items = t;
			}
		}
	}
}
