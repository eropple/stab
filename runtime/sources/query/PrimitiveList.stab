/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using java.lang;
using java.lang.reflect;
using java.util;
 
package stab.query {

	abstract class PrimitiveList<E> : List<E> {
		protected int size;

		public boolean addAll(Collection<E> c) {
			boolean result = false;
			foreach (var d in c) {
				result = true;
				add(d);
			}
			return result;
		}
		
		public void clear() {
			size = 0;
		}
		
		public boolean containsAll(Collection<?> c) {
			foreach (var o in c) {
				if (!contains(o)) {
					return false;
				}
			}
			return true;
		}
		
		public boolean isEmpty() {
			return size == 0;
		}
		
		public ListIterator<E> listIterator() {
			throw new UnsupportedOperationException();
		}
		
		public ListIterator<E> listIterator(int index) {
			throw new UnsupportedOperationException();
		}
		
		public boolean removeAll(Collection<?> c) {
			var result = false;
			foreach (var o in c) {
				if (remove(o)) {
					result = true;
				}
			}
			return result;
		}

		public int size() {
			return size;
		}

		public Object[] toArray() {
			var result = new Object[size];
			for (int i = 0; i < size; i++) {
				result[i] = this[i];
			}
			return result;
		}
		
		public T[] toArray<T>(T[] a) {
			T[] result;
			if (sizeof(a) < size) {
				result = (T[])Array.newInstance(a.getClass().getComponentType(), size);
			} else {
				result = a;
			}
			for (int i = 0; i < size; i++) {
				Array.set(result, i, this[i]);
			}
			if (sizeof(result) > size) {
				result[size] = null;
			}
			return result;
		}
	}
}
