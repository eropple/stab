/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using java.lang;
using java.util;
using stab.lang;

package stab.query {

	class IntArrayList : IntList {
		private final static int[] Empty = new int[0];
	
		private int[] items;
		private int size;
		
		IntArrayList(IntIterable source) {
			items = Empty;
			foreach (var i in source) {
				add(i);
			}
		}
		
		// Collection
		
		public boolean add(Integer e) {
			return add(e.intValue());
		}
		
		public boolean addAll(Collection<Integer> c) {
			boolean result = false;
			foreach (var i in c) {
				result = true;
				add(i);
			}
			return result;
		}
		
		public void clear() {
			size = 0;
		}
		
		public boolean contains(Object o) {
			var i = o as Integer;
			if (i == null) {
				return false;
			}
			return contains(i.intValue());
		}
		
		public boolean containsAll(Collection<?> c) {
			foreach (var o in c) {
				if (!contains(o)) {
					return false;
				}
			}
			return true;
		}
		
		public boolean isEmpty() {
			return size == 0;
		}
		
		public boolean remove(Object o) {
			var i = o as Integer;
			if (i == null) {
				return false;
			}
			return removeInt(i.intValue());
		}

		public boolean removeAll(Collection<?> c) {
			var result = false;
			foreach (var o in c) {
				if (remove(o)) {
					result = true;
				}
			}
			return result;
		}

		public boolean retainAll(Collection<?> c) {
			if (this.isEmpty() || c.isEmpty()) {
				return false;
			}
			var set = new IntHashSet(7);
			foreach (var o in c) {
				var i = o as Integer;
				if (i != null) {
					set.add(i.intValue());
				}
			}
			return retainAll(set);
		}
		
		private boolean retainAll(IntHashSet set) {
			var t = new int[Math.min(size, set.count())];
			int len = 0;
			for (int i = 0; i < size; i++) {
				var item = items[i];
				if (set.contains(item)) {
					t[len++] = item;
				}
			}
			if (size != len) {
				items = t;
				size = len;
				return true;
			}
			return false;
		}

		public int size() {
			return size;
		}
		
		public T[] toArray<T>(T[] a) {
			// TODO
			return null;
		}
		
		// IntCollection
		
		public boolean add(int i) {
			if (size == sizeof(items)) {
				resize(size * 2);
			}
			items[size++] = i;
			return true;
		}
		
		public boolean addAll(IntCollection c) {
			var result = false;
			foreach (var i in c) {
				result = true;
				add(i);
			}
			return result;
		}
		
		public boolean contains(int i) {
			for (int index = 0; index < size; index++) {
				if (items[index] == i) {
					return true;
				}
			}
			return false;
		}
		
		public boolean containsAll(IntCollection c) {
			foreach (var i in c) {
				if (!contains(i)) {
					return false;
				}
			}
			return true;
		}
		
		public IntIterator iterator() {
			for (int i = 0; i < size; i++) {
				yield return items[i];
			}
		}
		
		public boolean removeInt(int i) {
			for (int index = 0; index < size; index++) {
				if (items[index] == i) {
					removeAt(index);
					return true;
				}
			}
			return false;
		}
		
		public boolean removeAll(IntCollection c) {
			var result = false;
			foreach (var i in c) {
				if (removeInt(i)) {
					result = true;
				}
			}
			return result;
		}
		
		public boolean retainAll(IntCollection c) {
			if (this.isEmpty() || c.isEmpty()) {
				return false;
			}
			var set = new IntHashSet(7);
			foreach (var i in c) {
				set.add(i);
			}
			return retainAll(set);
		}
		
		public Object[] toArray() {
			var result = new Object[size];
			for (int i = 0; i < size; i++) {
				result[i] = items[i];
			}
			return null;
		}

		public int[] toArray(int[] a) {
			// TODO
			return null;
		}

		// List
		
		public void add(int index, Integer i) {
			if (i == null) {
				throw new NullPointerException("i");
			}
			add(index, i.intValue());
		}

		public boolean addAll(int index, Collection<Integer> c) {
			if (index < 0 || index > size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			int len = c.size();
			if (sizeof(items) < size + len) {
				resize((size + len) * 2);
			}
			if (index < size) {
				System.arraycopy(items, index, items, index + len, size - index);
			}
			var result = false;
			foreach (var i in c) {
				result = true;
				items[index++] = i;
			}
			size += len;
			return result;
		}

		public Integer get(int index) {
			return getInt(index);
		}

		public int indexOf(Object o) {
			var i = o as Integer;
			if (i == null) {
				return -1;
			}
			return indexOf(i.intValue());
		}
		
		public int lastIndexOf(Object o) {
			var i = o as Integer;
			if (i == null) {
				return -1;
			}
			return lastIndexOf(i.intValue());
		}

		
		public ListIterator<Integer> listIterator() {
			throw new UnsupportedOperationException();
		}
		
		public ListIterator<Integer> listIterator(int index) {
			throw new UnsupportedOperationException();
		}
		
		public Integer remove(int index) {
			return removeAt(index);
		}

		public Integer set(int index, Integer i) {
			if (i == null) {
				throw new NullPointerException("i");
			}
			return setInt(index, i.intValue());
		}
		
		// IntList
		
		public void add(int index, int i) {
			if (index < 0 || index > size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			if (size == sizeof(items)) {
				resize(size * 2);
			}
			if (index < size) {
				System.arraycopy(items, index, items, index + 1, size - index);
			}
			items[index] = i;
			size++;
		}
		
		public boolean addAll(int index, IntCollection c) {
			if (index < 0 || index > size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			int len = c.size();
			if (sizeof(items) < size + len) {
				resize((size + len) * 2);
			}
			if (index < size) {
				System.arraycopy(items, index, items, index + len, size - index);
			}
			var result = false;
			foreach (var i in c) {
				result = true;
				items[index++] = i;
			}
			size += len;
			return result;
		}
		
		public int indexOf(int i) {
			return 0;
		}
		
		public int lastIndexOf(int i) {
			return 0;
		}
		
		public int removeAt(int index) {
			if (index < 0 || index >= size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			size--;
			int result = items[index];
			if (index < size) {
				System.arraycopy(items, index + 1, items, index, size - index);
			}
			return result;
		}
		
		public IntList subList(int fromIndex, int toIndex) {
			throw new UnsupportedOperationException();
		}

		public int getInt(int index) {
			if (index < 0 || index >= size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			return items[index];
		}
		
		public int setInt(int index, int value) {
			if (index < 0 || index >= size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			int result = items[index];
			items[index] = value;
			return result;
		}
		
		private void resize(int newSize) {
			var length = sizeof(items);
			if (length == 0) {
				items = new int[(newSize == 0) ? 4 : newSize];
			} else {
				var t = new int[newSize];
				System.arraycopy(items, 0, t, 0, length);
				items = t;
			}
		}
	}
}
