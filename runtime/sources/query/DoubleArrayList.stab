/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using java.lang;
using java.lang.reflect;
using java.util;
using stab.lang;

package stab.query {

	class DoubleArrayList : PrimitiveList<Double>, DoubleList {
		private final static double[] Empty = new double[0];
	
		private double[] items;
		
		DoubleArrayList(DoubleIterable source) {
			items = Empty;
			foreach (var d in source) {
				add(d);
			}
		}
		
		// Collection
		
		public boolean add(Double d) {
			return add(d.doubleValue());
		}
		
		public boolean contains(Object o) {
			var d = o as Double;
			if (d == null) {
				return false;
			}
			return contains(d.doubleValue());
		}
		
		public boolean remove(Object o) {
			var d = o as Double;
			if (d == null) {
				return false;
			}
			return removeItem(d.doubleValue());
		}

		public boolean retainAll(Collection<?> c) {
			if (this.isEmpty() || c.isEmpty()) {
				return false;
			}
			var set = new DoubleHashSet(7);
			foreach (var o in c) {
				var d = o as Double;
				if (d != null) {
					set.add(d.doubleValue());
				}
			}
			return retainAll(set);
		}
		
		// DoubleCollection
		
		public boolean add(double d) {
			if (size == sizeof(items)) {
				resize(size * 2);
			}
			items[size++] = d;
			return true;
		}
		
		public boolean addAll(DoubleCollection c) {
			var result = false;
			foreach (var i in c) {
				result = true;
				add(i);
			}
			return result;
		}
		
		public boolean contains(double d) {
			for (int index = 0; index < size; index++) {
				if (items[index] == d) {
					return true;
				}
			}
			return false;
		}
		
		public boolean containsAll(DoubleCollection c) {
			foreach (var f in c) {
				if (!contains(f)) {
					return false;
				}
			}
			return true;
		}
		
		public DoubleIterator iterator() {
			for (int i = 0; i < size; i++) {
				yield return items[i];
			}
		}
		
		public boolean removeItem(double d) {
			for (int index = 0; index < size; index++) {
				if (items[index] == d) {
					removeAt(index);
					return true;
				}
			}
			return false;
		}
		
		public boolean removeAll(DoubleCollection c) {
			var result = false;
			foreach (var d in c) {
				if (removeItem(d)) {
					result = true;
				}
			}
			return result;
		}
		
		public boolean retainAll(DoubleCollection c) {
			if (this.isEmpty() || c.isEmpty()) {
				return false;
			}
			var set = new DoubleHashSet(7);
			foreach (var d in c) {
				set.add(d);
			}
			return retainAll(set);
		}

		private boolean retainAll(DoubleHashSet set) {
			var t = new double[Math.min(size, set.count())];
			int len = 0;
			for (int i = 0; i < size; i++) {
				var item = items[i];
				if (set.contains(item)) {
					t[len++] = item;
				}
			}
			if (size != len) {
				items = t;
				size = len;
				return true;
			}
			return false;
		}
		
		public double[] toArray(double[] a) {
			var result = (sizeof(a) < size) ? new double[size] : a;
			System.arraycopy(items, 0, result, 0, size);
			return result;
		}

		// List
		
		public void add(int index, Double d) {
			if (d == null) {
				throw new NullPointerException("d");
			}
			add(index, d.doubleValue());
		}

		public boolean addAll(int index, Collection<Double> c) {
			if (index < 0 || index > size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			int len = c.size();
			if (sizeof(items) < size + len) {
				resize((size + len) * 2);
			}
			if (index < size) {
				System.arraycopy(items, index, items, index + len, size - index);
			}
			var result = false;
			foreach (var d in c) {
				result = true;
				items[index++] = d;
			}
			size += len;
			return result;
		}

		public Double get(int index) {
			return getItem(index);
		}

		public int indexOf(Object o) {
			var d = o as Double;
			if (d == null) {
				return -1;
			}
			return indexOf(d.doubleValue());
		}
		
		public int lastIndexOf(Object o) {
			var d = o as Double;
			if (d == null) {
				return -1;
			}
			return lastIndexOf(d.doubleValue());
		}
		
		public Double remove(int index) {
			return removeAt(index);
		}

		public Double set(int index, Double d) {
			if (d == null) {
				throw new NullPointerException("d");
			}
			return setItem(index, d.doubleValue());
		}
		
		// DoubleList
		
		public void add(int index, double d) {
			if (index < 0 || index > size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			if (size == sizeof(items)) {
				resize(size * 2);
			}
			if (index < size) {
				System.arraycopy(items, index, items, index + 1, size - index);
			}
			items[index] = d;
			size++;
		}
		
		public boolean addAll(int index, DoubleCollection c) {
			if (index < 0 || index > size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			int len = c.size();
			if (sizeof(items) < size + len) {
				resize((size + len) * 2);
			}
			if (index < size) {
				System.arraycopy(items, index, items, index + len, size - index);
			}
			var result = false;
			foreach (var d in c) {
				result = true;
				items[index++] = d;
			}
			size += len;
			return result;
		}
		
		public int indexOf(double d) {
			for (int index = 0; index < size; index++) {
				if (items[index] == d) {
					return index;
				}
			}
			return -1;
		}
		
		public int lastIndexOf(double d) {
			for (int index = size - 1; index >= 0; index++) {
				if (items[index] == d) {
					return index;
				}
			}
			return -1;
		}
		
		public double removeAt(int index) {
			if (index < 0 || index >= size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			size--;
			var result = items[index];
			if (index < size) {
				System.arraycopy(items, index + 1, items, index, size - index);
			}
			return result;
		}
		
		public DoubleList subList(int fromIndex, int toIndex) {
			throw new UnsupportedOperationException();
		}

		public double getItem(int index) {
			if (index < 0 || index >= size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			return items[index];
		}
		
		public double setItem(int index, double value) {
			if (index < 0 || index >= size) {
				throw new IndexOutOfBoundsException("index = " + index);
			}
			var result = items[index];
			items[index] = value;
			return result;
		}
		
		private void resize(int newSize) {
			var length = sizeof(items);
			if (length == 0) {
				items = new double[(newSize == 0) ? 4 : newSize];
			} else {
				var t = new double[newSize];
				System.arraycopy(items, 0, t, 0, length);
				items = t;
			}
		}
	}
}
