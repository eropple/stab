/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using java.lang;
using java.util;
using stab.query;
using stab.tools.bytecode;
using stab.tools.compiler;
using stab.tools.syntaxtree;

package stab.tools.eclipse.helpers {

	public class SyntaxTreeHelper {
		public static Iterable<TypeMemberNode> getTypeMembers(CompilationUnitNode compilationUnit) {
			var result = new ArrayList<TypeMemberNode>();
			addTypeMembers(compilationUnit.getBody(), result);
			return result;
		}
		
		public static Iterable<JvmTypeInfo> getTypeMemberDependencies(TypeMemberNode tm) {
			var result = new HashSet<JvmTypeInfo>();
			addTypeMemberDependencies(tm, result);
			return result;
		}
		
		private static void addTypeMembers(PackageBodyNode packageBody, List<TypeMemberNode> types) {
			if (packageBody != null) {
				foreach (var m in packageBody.getMembers()) {
					switch (m.PackageMemberKind) {
					case Package:
						var p = (PackageDeclarationNode)m;
						if (p.Body != null) {
							addTypeMembers(p.Body, types);
						}
						break;
	
					case Class:
						var c = (ClassDeclarationNode)m;
						addTypeMembers(c, types);
						break;
	
					case Interface:
					case Delegate:
						types.add((TypeMemberNode)m);
						break;
					}
				}
			}
		}
		
		private static void addTypeMembers(ClassDeclarationNode classDeclaration, List<TypeMemberNode> types) {
			types.add(classDeclaration);
			foreach (var m in classDeclaration.Members) {
				switch (m.TypeMemberKind) {
				case Class:
					var c = (ClassDeclarationNode)m;
					addTypeMembers(c, types);
					break;
					
				case Interface:
				case Delegate:
					types.add((TypeMemberNode)m);
					break;
				}
			}
		}

		private static void addDependencies(JvmTypeInfo type, Set<JvmTypeInfo> dependencies) {
			if (type == null || type.IsPrimitive || type.IsGenericParameter) {
				return;
			}
			while (type.IsArray) {
				type = type.ElementType;
			}
			foreach (var a in type.GenericArguments) {
				addDependencies(a, dependencies);
			}
			dependencies.add(type);
		}
		
		private static void addTypeMemberDependencies(TypeMemberNode tm, Set<JvmTypeInfo> dependencies) {
			var t = tm.getUserData(typeof(JvmTypeInfo));
			if (t == null) {
				return;
			}
			addAnnotationsDependencies(t.Annotations, dependencies);
			foreach (var ga in t.GenericArguments) {
				foreach (var b in ga.GenericParameterBounds) {
					addDependencies(b, dependencies);
				}
			}
			
			ExpressionDependenciesHandler expressionHandler = null;
			switch (tm.TypeMemberKind) {
			case Class:
				var c = (ClassDeclarationNode)tm;
				addDependencies(t.BaseType, dependencies);
				foreach (var i in t.Interfaces) {
					addDependencies(i, dependencies);
				}
				foreach (var cm in c.Members) {
					switch (cm.TypeMemberKind) {
					case Class:
					case Interface:
					case Delegate:
						addTypeMemberDependencies((TypeMemberNode)cm, dependencies);
						break;
					case EnumConstant:
						var enumConstant = (EnumConstantDeclarationNode)cm;
						addTypeMemberDependencies(enumConstant, dependencies);
						foreach (var e in enumConstant.Arguments) {
							if (expressionHandler == null) {
								expressionHandler = new ExpressionDependenciesHandler(null);
							}
							expressionHandler.handleExpression(e, dependencies, true);
						}
						break;
					case Field:
						foreach (var decl in ((FieldDeclarationNode)cm).Declarators) {
							var f = decl.getUserData(typeof(JvmFieldInfo));
							addDependencies(f.Type, dependencies);
							addAnnotationsDependencies(f.Annotations, dependencies);
							if (decl.Value != null) {
								if (expressionHandler == null) {
									expressionHandler = new ExpressionDependenciesHandler(null);
								}
								expressionHandler.handleExpression(decl.Value, dependencies, true);
							}
						}
						break;
					case Constructor:
						var constructor = (ConstructorDeclarationNode)cm;
						addBodyDependencies(constructor.getUserData(typeof(JvmMethodInfo)), constructor.Body, dependencies);
						if (constructor.Initializer != null) {
							foreach (var e in constructor.Initializer.Arguments) {
								if (expressionHandler == null) {
									expressionHandler = new ExpressionDependenciesHandler(null);
								}
								expressionHandler.handleExpression(e, dependencies, true);
							}
						}
						break;
					case Destructor:
						var destructor = (DestructorDeclarationNode)cm;
						addBodyDependencies(destructor.getUserData(typeof(JvmMethodInfo)), destructor.Body, dependencies);
						break;
					case Method:
						var method = (MethodDeclarationNode)cm;
						addBodyDependencies(method.getUserData(typeof(JvmMethodInfo)), method.Body, dependencies);
						break;
					case Property:
					case Indexer:
						var accessorsOwner = (IAccessorsOwner)cm;
						var get = accessorsOwner.getGetAccessor();
						var set = accessorsOwner.getSetAccessor();
						if (get != null) {
							addBodyDependencies(get.getUserData(typeof(JvmMethodInfo)), get.Body, dependencies);
						}
						if (set != null) {
							addBodyDependencies(set.getUserData(typeof(JvmMethodInfo)), set.Body, dependencies);
						}
						break;
					}
				}
				break;
			case Interface:
			case Delegate:
				foreach (var i in t.getInterfaces()) {
					addDependencies(i, dependencies);
					addAnnotationsDependencies(i.Annotations, dependencies);
				}
				foreach (var meth in t.Methods) {
					addDependencies(meth.ReturnType, dependencies);
					addAnnotationsDependencies(meth.Annotations, dependencies);
					foreach (var p in meth.Parameters) {
						addDependencies(p.Type, dependencies);
						addAnnotationsDependencies(p.Annotations, dependencies);
					}
				}
				break;
			}
		}

		private static void addBodyDependencies(JvmMethodInfo meth, BlockStatementNode body, Set<JvmTypeInfo> dependencies) {
			addAnnotationsDependencies(meth.Annotations, dependencies);
			addDependencies(meth.ReturnType, dependencies);
			foreach (var p in meth.Parameters) {
				addDependencies(p.Type, dependencies);
				addAnnotationsDependencies(p.Annotations, dependencies);
			}
			foreach (var tp in meth.GenericArguments) {
				foreach (var b in tp.GenericParameterBounds) {
					addDependencies(b, dependencies);
				}
			}
			if (body != null) {
				new StatementDependenciesHandler(null).handleStatement(body, dependencies);
			}
		}
		
		private static void addAnnotationsDependencies(Iterable<JvmAnnotationValue> values, Set<JvmTypeInfo> dependencies) {
			foreach (var av in values) {
				foreach (var s in av.getArgumentNames()) {
					addAnnotationDependencies(av.getArgument(s), dependencies);
				}
			}
		}

		private static void addAnnotationDependencies(JvmAnnotationArgument arg, Set<JvmTypeInfo> dependencies) {
			switch (arg.AnnotationArgumentKind) {
			case Annotation:
				foreach (var s in arg.getArgumentNames()) {
					addAnnotationDependencies(arg.getArgument(s), dependencies);
				}
				break;
			case Array:
				foreach (var e in arg.getElements()) {
					addAnnotationDependencies(e, dependencies);
				}
				break;
			case Enum:
			case Type:
				addDependencies(arg.Type, dependencies);
				break;
			}
		}

		class StatementDependenciesHandler : StatementHandler<Set<JvmTypeInfo>, Void> {
			private ExpressionDependenciesHandler expressionHandler;
		
			StatementDependenciesHandler(ExpressionDependenciesHandler expressionHandler)
					: super(false) {
				this.expressionHandler = expressionHandler ?? new ExpressionDependenciesHandler(this);
			}
			
			protected override Void handleBlock(BlockStatementNode block, Set<JvmTypeInfo> dependencies) {
				foreach (StatementNode s in block.Statements) {
					handleStatement(s, dependencies);
				}
				return null;
			}
			
			protected override Void handleDo(DoStatementNode doStatement, Set<JvmTypeInfo> dependencies) {
				expressionHandler.handleExpression(doStatement.Condition, dependencies, true);
				handleStatement(doStatement.Statement, dependencies);
				return null;
			}
			
			protected override Void handleExpression(ExpressionStatementNode expression, Set<JvmTypeInfo> dependencies) {
				expressionHandler.handleExpression(expression.Expression, dependencies, false);
				return null;
			}
			
			protected override Void handleFor(ForStatementNode forStatement, Set<JvmTypeInfo> dependencies) {
				foreach (var s in forStatement.Initializer) {
					handleStatement(s, dependencies);
				}
				if (forStatement.Condition != null) {
					expressionHandler.handleExpression(forStatement.Condition, dependencies, true);
				}
				foreach (var s in forStatement.Iterator) {
					handleStatement(s, dependencies);
				}
				handleStatement(forStatement.Statement, dependencies);
				return null;
			}
			
			protected override Void handleForeach(ForeachStatementNode foreachStatement, Set<JvmTypeInfo> dependencies) {
				if (foreachStatement.Type != null) {
					var info = foreachStatement.getUserData(typeof(MemberInfo));
					addDependencies(info.Type, dependencies);
				}
				expressionHandler.handleExpression(foreachStatement.Source, dependencies, true);
				handleStatement(foreachStatement.Statement, dependencies);
				return null;
			}
			
			protected override Void handleIf(IfStatementNode ifStatement, Set<JvmTypeInfo> dependencies) {
				expressionHandler.handleExpression(ifStatement.Condition, dependencies, true);
				handleStatement(ifStatement.IfTrue, dependencies);
				if (ifStatement.IfFalse != null) {
					handleStatement(ifStatement.IfFalse, dependencies);
				}
				return null;
			}
			
			protected override Void handleLabeled(LabeledStatementNode labeled, Set<JvmTypeInfo> dependencies) {
				handleStatement(labeled.Statement, dependencies);
				return null;
			}
			
			protected override Void handleLocalDeclaration(LocalDeclarationStatementNode localDeclaration, Set<JvmTypeInfo> dependencies) {
				var info = localDeclaration.getUserData(typeof(ExpressionInfo));
				addDependencies(info.Type, dependencies);
				foreach (var decl in localDeclaration.Declarators) {
					if (decl.Value != null) {
						expressionHandler.handleExpression(decl.Value, dependencies, true);
					}
				}
				return null;
			}
			
			protected override Void handleReturn(ReturnStatementNode returnStatement, Set<JvmTypeInfo> dependencies) {
				if (returnStatement.Value != null) {
					expressionHandler.handleExpression(returnStatement.Value, dependencies, true);
				}
				return null;
			}
			
			protected override Void handleSwitch(SwitchStatementNode switchStatement, Set<JvmTypeInfo> dependencies) {
				expressionHandler.handleExpression(switchStatement.Selector, dependencies, true);
				var sinfo = switchStatement.Selector.getUserData(typeof(ExpressionInfo));
				addDependencies(sinfo.Type, dependencies);
				foreach (var section in switchStatement.Sections) {
					if (section.CaseExpression != null) {
						if (!sinfo.Type.IsEnum) {
							expressionHandler.handleExpression(section.CaseExpression, dependencies, true);
						}
					}
					foreach (var s in section.Statements) {
						handleStatement(s, dependencies);
					}
				}
				return null;
			}
			
			protected override Void handleSynchronized(SynchronizedStatementNode synchronizedStatement, Set<JvmTypeInfo> dependencies) {
				expressionHandler.handleExpression(synchronizedStatement.Lock, dependencies, true);
				handleStatement(synchronizedStatement.Statement, dependencies);
				return null;
			}
	
			protected override Void handleThrow(ThrowStatementNode throwStatement, Set<JvmTypeInfo> dependencies) {
				if (throwStatement.Exception != null) {
					expressionHandler.handleExpression(throwStatement.Exception, dependencies, true);
				}
				return null;
			}
	
			protected override Void handleTry(TryStatementNode tryStatement, Set<JvmTypeInfo> dependencies) {
				handleBlock(tryStatement.Block, dependencies);
				foreach (var cc in tryStatement.CatchClauses) {
					if (cc.ExceptionType != null) {
						addDependencies(cc.getUserData(typeof(JvmTypeInfo)), dependencies);
					}
					handleBlock(cc.Block, dependencies);
				}
				if (tryStatement.Finally != null) {
					handleBlock(tryStatement.Finally, dependencies);
				}
				return null;
			}
	
			protected override Void handleUsing(UsingStatementNode usingStatement, Set<JvmTypeInfo> dependencies) {
				handleStatement(usingStatement.ResourceAcquisition, dependencies);
				handleStatement(usingStatement.Statement, dependencies);
				return null;
			}
			
			protected override Void handleWhile(WhileStatementNode whileStatement, Set<JvmTypeInfo> dependencies) {
				expressionHandler.handleExpression(whileStatement.Condition, dependencies, true);
				handleStatement(whileStatement.Statement, dependencies);
				return null;
			}
			
			protected override Void handleYield(YieldStatementNode yield, Set<JvmTypeInfo> dependencies) {
				if (yield.Value != null) {
					expressionHandler.handleExpression(yield.Value, dependencies, true);
				}
				return null;
			}
		}
		
		class ExpressionDependenciesHandler : ExpressionHandler<Set<JvmTypeInfo>, Void> {
			private StatementDependenciesHandler statementHandler;
			
			ExpressionDependenciesHandler(StatementDependenciesHandler statementHandler)
					: super(false) {
				this.statementHandler = statementHandler ?? new StatementDependenciesHandler(this);
			}
			
			protected override Void handleAnonymousObjectCreation(AnonymousObjectCreationExpressionNode anonymousObject, Set<JvmTypeInfo> dependencies, boolean nested) {
				foreach (MemberInitializerNode mi in anonymousObject.getMemberDeclarators()) {
					handleExpression(mi.getValue(), dependencies, nested);
				}
				return null;
			}
	
			protected override Void handleArrayCreation(ArrayCreationExpressionNode arrayCreation, Set<JvmTypeInfo> dependencies, boolean nested) {
				var info = arrayCreation.getUserData(typeof(ExpressionInfo));
				addDependencies(info.Type, dependencies);
				foreach (var e in arrayCreation.DimensionExpressions) {
					handleExpression(e, dependencies, true);
				}
				if (arrayCreation.Initializer != null) {
					handleExpression(arrayCreation.Initializer, dependencies, true);
				}
				return null;
			}
			
			protected override Void handleArrayInitializer(ArrayInitializerExpressionNode arrayInitializer, Set<JvmTypeInfo> dependencies, boolean nested) {
				foreach (var e in arrayInitializer.Values) {
					handleExpression(e, dependencies, true);
				}
				return null;
			}
			
			protected override Void handleAssign(AssignExpressionNode assign, Set<JvmTypeInfo> dependencies, boolean nested) {
				handleExpression(assign.Left, dependencies, true);
				handleExpression(assign.Right, dependencies, true);
				return null;
			}
			
			protected override Void handleBinary(BinaryExpressionNode binary, Set<JvmTypeInfo> dependencies, boolean nested) {
				handleExpression(binary.LeftOperand, dependencies, true);
				handleExpression(binary.RightOperand, dependencies, true);
				return null;
			}
			
			protected override Void handleCast(CastExpressionNode cast, Set<JvmTypeInfo> dependencies, boolean nested) {
				var info = cast.getUserData(typeof(ExpressionInfo));
				addDependencies(info.Type, dependencies);
				handleExpression(cast.Expression, dependencies, true);
				return null;
			}
	
			protected override Void handleConditional(ConditionalExpressionNode conditional, Set<JvmTypeInfo> dependencies, boolean nested) {
				handleExpression(conditional.Condition, dependencies, true);
				handleExpression(conditional.IfTrue, dependencies, true);
				handleExpression(conditional.IfFalse, dependencies, true);
				return null;
			}
			
			protected override Void handleElementAccess(ElementAccessExpressionNode elementAccess, Set<JvmTypeInfo> dependencies, boolean nested) {
				handleExpression(elementAccess.TargetObject, dependencies, true);
				foreach (var e in elementAccess.Indexes) {
					handleExpression(e, dependencies, true);
				}
				return null;
			}
			
			protected override Void handleInvocation(InvocationExpressionNode invocation, Set<JvmTypeInfo> dependencies, boolean nested) {
				handleExpression(invocation.TargetObject, dependencies, nested);
				foreach (var e in invocation.Arguments) {
					handleExpression(e, dependencies, true);
				}
				return null;
			}
			
			protected override Void handleLambda(LambdaExpressionNode lambda, Set<JvmTypeInfo> dependencies, boolean nested) {
				var m = lambda.getUserData(typeof(JvmMethodInfo));
				foreach (var p in m.Parameters) {
					addDependencies(p.Type, dependencies);
				}
				statementHandler.handleStatement(lambda.Body, null);
				return null;
			}
	
			protected override Void handleMemberAccess(MemberAccessExpressionNode memberAccess, Set<JvmTypeInfo> dependencies, boolean nested) {
				var info = memberAccess.getUserData(typeof(ExpressionInfo));
				var member = info.getMember();
				handleExpression(memberAccess.TargetObject, null, nested);
				if (member == null) {
					var type = info.Type;
		            if (type != null) {
						addDependencies(type, dependencies);
		            }
				}
				return null;
			}
			
			protected override Void handleObjectCreation(ObjectCreationExpressionNode objectCreation, Set<JvmTypeInfo> dependencies, boolean nested) {
				var info = objectCreation.getUserData(typeof(ExpressionInfo));
				addDependencies(info.Type, dependencies);
				foreach (var e in objectCreation.Arguments) {
					handleExpression(e, dependencies, true);
				}
				if (objectCreation.Initializer != null) {
					handleExpression(objectCreation.Initializer, dependencies, true);
				}
				return null;
			}
	
			protected override Void handleCollectionInitializer(CollectionInitializerExpressionNode initializer, Set<JvmTypeInfo> dependencies, boolean nested) {
				foreach (var e in initializer.Values.selectMany(p => p)) {
					handleExpression(e, dependencies, true);
				}
				return null;
			}
	
			protected override Void handleObjectInitializer(ObjectInitializerExpressionNode initializer, Set<JvmTypeInfo> dependencies, boolean nested) {
				foreach (var init in initializer.MemberInitializers) {
					handleExpression(init.Value, dependencies, true);
				}
				return null;
			}
	
			protected override Void handleSimpleName(SimpleNameExpressionNode simpleName, Set<JvmTypeInfo> dependencies, boolean nested) {
				var info = simpleName.getUserData(typeof(ExpressionInfo));
				var member = info.Member;
				if (member != null && member.MemberKind == MemberKind.Type) {
					addDependencies(member.Type, dependencies);
				}
				return null;
			}
			
			protected override Void handleSizeof(SizeofExpressionNode sizeofExpression, Set<JvmTypeInfo> dependencies, boolean nested) {
				handleExpression(sizeofExpression.Expression, dependencies, nested);
				return null;
			}
	
			protected override Void handleType(TypeExpressionNode type, Set<JvmTypeInfo> dependencies, boolean nested) {
				var info = type.getUserData(typeof(ExpressionInfo));
				addDependencies(info.Type, dependencies);
				return null;
			}
			
			protected override Void handleTypeof(TypeofExpressionNode typeofExpression, Set<JvmTypeInfo> dependencies, boolean nested) {
				addDependencies(typeofExpression.getUserData(typeof(JvmTypeInfo)), dependencies);
				return null;
			}
			
			protected override Void handleUnary(UnaryExpressionNode unary, Set<JvmTypeInfo> dependencies, boolean nested) {
				handleExpression(unary.Operand, dependencies, true);
				return null;
			}
		}
	}
}
