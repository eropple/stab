/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using org.eclipse.core.resources;
using org.eclipse.jface.text;
using org.eclipse.swt.widgets;
using org.eclipse.ui;
using org.eclipse.ui.texteditor;

package stab.tools.eclipse.editors {

	public class SourceEditorActionContributor : BasicTextEditorActionContributor {
	
	}

	//
	// The editor for Stab source files.
	//
	public class SourceEditor : AbstractDecoratedTextEditor {
		private TextInputListener textInputListener;

		public override void createPartControl(Composite parent) {
			super.createPartControl(parent);
			
			textInputListener = new TextInputListener(this);
		}

		public override void dispose() {
			
			if (textInputListener != null) {
				textInputListener.dispose();
				textInputListener = null;
			}
			super.dispose();
		}
	
		IFile getFile() {
			var editorInput = getEditorInput() as IFileEditorInput;
			return (editorInput == null) ? null : editorInput.getFile();
		}
	
		private class TextInputListener : ITextInputListener {
			private SourceEditor editor;
			private Highlighter highlighter;
			
			TextInputListener(SourceEditor editor) {
				this.editor = editor;
				var sourceViewer = editor.getSourceViewer();
				sourceViewer.addTextInputListener(this);
				var documentProvider = editor.getDocumentProvider();
				if (documentProvider != null) {
					var document = documentProvider.getDocument(editor.getEditorInput());
					if (document != null) {
						highlighter = new Highlighter(sourceViewer, document, editor.getFile(), editor.getSharedColors());
					}
				}
			}
			
			void dispose() {
				if (highlighter != null) {
					highlighter.dispose();
				}
				if (editor != null) {
					editor.getSourceViewer().removeTextInputListener(this);
					editor = null;
				}
			}
		
			public void inputDocumentAboutToBeChanged(IDocument oldInput, IDocument newInput) {
				if (highlighter != null) {
					highlighter.dispose();
					highlighter = null;
				}
			}
			
			public void inputDocumentChanged(IDocument oldInput, IDocument newInput) {
				if (newInput != null) {
					highlighter = new Highlighter(editor.getSourceViewer(), newInput, editor.getFile(), editor.getSharedColors());
				}
			}
		}
	}
}
