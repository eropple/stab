Features ==============================

1 - Expression trees
2 - Generic constructors
	* syntax for this and super clauses (this<T1, T2>(...))
	* syntax for new (new <T1, T2> C(...))


Issues ================================

- validate generic constraints
- test constant expressions with static final fields
- generate bridge methods for public abstract methods implemented in private superclasses?
- create an InternalErrorException class
- test partial methods
- check that #define/#undef is used before any lexical unit

Errors ================================

public class C<T> {
	private T[] t;
	public C() {
		t = new T[1];
	}
}

=> Warning: generic type array creation is unsafe.
==============================
using java.lang;

public class ArrayInitializerAutoboxing {
	public static int method(short s) {
		Integer[] t = { s };
		return t[0];
	}
}
=> Error: wrong array element type
===============================
package a {
    class A {
        protected void m() {
        }
    }
}
package b {
    class B {
        void n() {
            new C().m();
        }
        class C : A {
        }
    }
}
=> Error: no accessible member 'm'
===============================
class C {
    void m() {}
    class D {
        void n() {
            C.m();
        }
    }
}
=> Error: no accessible member 'm'
